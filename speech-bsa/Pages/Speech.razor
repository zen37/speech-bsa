@page "/speech"
@using Microsoft.CognitiveServices.Speech;
@using Microsoft.CognitiveServices.Speech.Audio;

@inject IConfiguration configuration;

<div class="row my-2">
    <h4 class="card-title text-primary mb-3 ml-3">text</h4>

    <div class="col-10">
        <textarea @bind="text" placeholder="I will be back" rows="4" cols="50"></textarea>
    </div>
    <div>
        <p>
            <button class="btn btn-primary" @onclick="speakText">speak</button>
        </p>
    </div>
</div>
<div class="row my-2">
    <h4 class="card-title text-primary mb-3 ml-3">ssml</h4>

    <div class="col-10">
        <textarea @bind="ssml" placeholder="I will be back" rows="8" cols="100"></textarea>
    </div>
    <div>
        <p>
            <button class="btn btn-primary" @onclick="speakSSML">speak</button>
        </p>
    </div>
</div>


@code {
    private string text = "I will be back";
    private string ssml;

    private async Task speakText()
    {
        await  Audio("text");
    }

    private async Task speakSSML()
    {
        await Audio("ssml");
    }

    private async Task Audio(string typeInput)
    {

        string speechKey = configuration["AzureSpeechService:key"];
        string speechRegion = configuration["AzureSpeechService:region"];

        var speechConfig = SpeechConfig.FromSubscription(speechKey, speechRegion);

        // language of the voice that speaks.
        speechConfig.SpeechSynthesisVoiceName = "en-US-DavisNeural";

        using (var speechSynthesizer = new SpeechSynthesizer(speechConfig))
        {

            var speechSynthesisResult = await (typeInput == "text" ? speechSynthesizer.SpeakTextAsync(text) : speechSynthesizer.SpeakSsmlAsync(ssml));

            switch (speechSynthesisResult.Reason)
            {
                case ResultReason.SynthesizingAudioCompleted:
                    Console.WriteLine($"Speech synthesized for text: [{text}]");
                    break;
                case ResultReason.Canceled:
                    var cancellation = SpeechSynthesisCancellationDetails.FromResult(speechSynthesisResult);
                    Console.WriteLine($"CANCELED: Reason={cancellation.Reason}");

                    if (cancellation.Reason == CancellationReason.Error)
                    {
                        Console.WriteLine($"CANCELED: ErrorCode={cancellation.ErrorCode}");
                        Console.WriteLine($"CANCELED: ErrorDetails=[{cancellation.ErrorDetails}]");
                        Console.WriteLine($"CANCELED: Did you set the speech resource key and region values?");
                    }
                    break;
                default:
                    break;
            }
        }
    }
} 
